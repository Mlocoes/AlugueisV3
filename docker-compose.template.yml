services:
  # Base de dados PostgreSQL
  postgres:
    image: postgres:15
    container_name: alugueis_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - alugueis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Adminer para gestão de base de dados (apenas acesso interno)
  adminer:
    image: adminer:latest
    container_name: alugueis_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - alugueis_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    dns:
      - 172.20.0.2  # Pi-hole DNS
    labels:
      - "traefik.enable=false"

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alugueis_backend
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      CSRF_SECRET_KEY: ${CSRF_SECRET_KEY}
      DEBUG: ${DEBUG:-false}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - alugueis_network
      - ${TRAEFIK_NETWORK}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    dns:
      - 172.20.0.2  # Pi-hole DNS
    labels:
      - "traefik.enable=true"
      # Router HTTPS para API
      - "traefik.http.routers.alugueis-backend-secure.entrypoints=https"
      - "traefik.http.routers.alugueis-backend-secure.rule=Host(`${APP_URL}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.alugueis-backend-secure.service=alugueis-backend"
      - "traefik.http.routers.alugueis-backend-secure.priority=300"
      - "traefik.http.routers.alugueis-backend-secure.tls=true"
      - "traefik.http.routers.alugueis-backend-secure.tls.certresolver=myresolver"
      # Serviço
      - "traefik.http.services.alugueis-backend.loadbalancer.server.port=8000"
      - "traefik.docker.network=${TRAEFIK_NETWORK}"

  # Frontend Nginx
  frontend:
    image: nginx:alpine
    container_name: alugueis_frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx-frontend.conf:/etc/nginx/conf.d/default.conf
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - alugueis_network
      - ${TRAEFIK_NETWORK}
    dns:
      - 172.20.0.2  # Pi-hole DNS
    depends_on:
      - backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Router Frontend HTTPS
      - "traefik.http.routers.alugueis-frontend-secure.entrypoints=https"
      - "traefik.http.routers.alugueis-frontend-secure.rule=Host(`${APP_URL}`)"
      - "traefik.http.routers.alugueis-frontend-secure.priority=100"
      - "traefik.http.routers.alugueis-frontend-secure.tls=true"
      - "traefik.http.routers.alugueis-frontend-secure.tls.certresolver=myresolver"
      - "traefik.http.routers.alugueis-frontend-secure.service=alugueis-frontend"
      # Serviço
      - "traefik.http.services.alugueis-frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=${TRAEFIK_NETWORK}"

volumes:
  postgres_data:
    driver: local

networks:
  alugueis_network:
    driver: bridge
  ${TRAEFIK_NETWORK}:
    external: true