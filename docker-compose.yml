services:
  # Base de datos PostgreSQL especializada para alquileres V2
  postgres:
    image: postgres:15
    container_name: alugueis_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"  # Puerto estándar de PostgreSQL
    networks:
      - alugueis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alugueis_usuario -d alugueis_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Adminer para gestión de base de datos
  adminer:
    image: adminer:latest
    container_name: alugueis_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    networks:
      - alugueis_network
      - kronos-net
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    dns:
      - 172.20.0.2  # Usa Pi-hole como DNS
    labels:
      # Adminer deshabilitado en Traefik - Solo acceso interno si es necesario
      - "traefik.enable=false"

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alugueis_backend
    env_file:
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      CSRF_SECRET_KEY: csrf_secret_key_for_alugueis_v3_system_2025
      DEBUG: ${DEBUG}
    # Elimina esta línea:
    # CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS}
    volumes:
      - ./backend:/app
    networks:
      - alugueis_network
      - kronos-net
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    dns:
      - 172.20.0.2  # Usa Pi-hole como DNS
    labels:
      # Backend deshabilitado en Traefik - nginx maneja las peticiones API internamente
      - "traefik.enable=false"

  # Frontend Optimizado
  frontend:
    image: nginx:alpine
    container_name: alugueis_frontend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx-frontend.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"
    networks:
      - alugueis_network
      - kronos-net
    dns:
      - 172.20.0.2  # Usa Pi-hole como DNS
    depends_on:
      - backend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alugueis-frontend-secure.entrypoints=https"
      - "traefik.http.routers.alugueis-frontend-secure.rule=Host(`${FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.alugueis-frontend-secure.tls=true"
      - "traefik.http.routers.alugueis-frontend-secure.service=alugueis-frontend"
      - "traefik.http.services.alugueis-frontend.loadbalancer.server.port=80"

volumes:
  postgres_data:
    driver: local

networks:
  alugueis_network:
    driver: bridge
  kronos-net:
    external: true
